@model WsRaisedHandsModern.Api.ViewModels.DashboardViewModel

@{
    ViewData["Title"] = "IT Automation Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-6"><i class="bi bi-speedometer2 text-primary"></i> IT Automation Dashboard</h1>
                    <p class="text-muted">Central control panel for IT operations and automation</p>
                </div>
                <div>
                    <button class="btn btn-outline-primary me-2" onclick="refreshDashboard()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-outline-secondary" onclick="toggleFullscreen()">
                        <i class="bi bi-fullscreen"></i> Fullscreen
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- System Status Row -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-gradient" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <h5 class="text-white mb-0">
                        <i class="bi bi-activity"></i> System Status
                        <span class="badge bg-light text-dark ms-2">@Model.SystemStatus.Status</span>
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <div class="bg-success rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="bi bi-check-circle text-white"></i>
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-0">System Status</h6>
                                    <small class="text-success">@Model.SystemStatus.Status</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <div class="bg-info rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="bi bi-people text-white"></i>
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-0">Active Connections</h6>
                                    <small class="text-muted">@Model.SystemStatus.ActiveConnections</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <div class="bg-warning rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="bi bi-clock text-white"></i>
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-0">Last Updated</h6>
                                    <small class="text-muted">@Model.SystemStatus.LastUpdated.ToString("HH:mm:ss")</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="d-flex align-items-center">
                                <div class="me-3">
                                    <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="bi bi-server text-white"></i>
                                    </div>
                                </div>
                                <div>
                                    <h6 class="mb-0">Services</h6>
                                    <small class="text-muted">@Model.SystemStatus.Services.Count(s => s.Status == "Online")/@Model.SystemStatus.Services.Count Online</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Service Status Details -->
                    <hr>
                    <div class="row">
                        @foreach (var service in Model.SystemStatus.Services)
                        {
                            <div class="col-md-3 mb-2">
                                <div class="d-flex justify-content-between align-items-center p-2 rounded bg-light">
                                    <div class="d-flex align-items-center">
                                        <span class="badge bg-@(service.Status == "Online" ? "success" : service.Status == "Warning" ? "warning" : "danger") me-2">
                                            @service.Status
                                        </span>
                                        <small>@service.Name</small>
                                    </div>
                                    <small class="text-muted">@service.ResponseTime.TotalMilliseconds ms</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Dashboard Sections -->
    @foreach (var sec in Model.Sections)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-@sec.Color text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="@sec.Icon"></i> @sec.Title
                            </h5>
                            <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#@sec.Id" aria-expanded="true">
                                <i class="bi bi-chevron-down"></i>
                            </button>
                        </div>
                    </div>
                    <div class="collapse show" id="@sec.Id">
                        <div class="card-body">
                            <div class="row">
                                @foreach (var endpoint in sec.Endpoints)
                                {
                                    <div class="col-xl-4 col-lg-6 col-md-6 mb-3">
                                        <div class="card h-100 border-0 shadow-sm endpoint-card" data-endpoint-id="@endpoint.Id">
                                            <div class="card-body d-flex flex-column">
                                                <div class="d-flex align-items-start mb-3">
                                                    <div class="me-3">
                                                        <div class="bg-@endpoint.ButtonColor bg-opacity-10 rounded-circle d-flex align-items-center justify-content-center" style="width: 48px; height: 48px;">
                                                            <i class="@endpoint.Icon text-@endpoint.ButtonColor fs-5"></i>
                                                        </div>
                                                    </div>
                                                    <div class="flex-grow-1">
                                                        <h6 class="card-title mb-1">@endpoint.Title</h6>
                                                        <p class="card-text text-muted small mb-0">@endpoint.Description</p>
                                                    </div>
                                                </div>
                                                
                                                <div class="mt-auto">
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        <small class="text-muted">
                                                            <span class="badge bg-secondary">@endpoint.Method</span>
                                                            @if (endpoint.IsExternal)
                                                            {
                                                                <span class="badge bg-info ms-1">External</span>
                                                            }
                                                            @if (endpoint.RequiresAuth)
                                                            {
                                                                <span class="badge bg-warning ms-1">Auth Required</span>
                                                            }
                                                        </small>
                                                    </div>
                                                    
                                                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                                        @if (endpoint.Method == "GET")
                                                        {
                                                            <a href="@endpoint.Url" class="btn btn-@endpoint.ButtonColor btn-sm flex-fill" 
                                                               @(endpoint.IsExternal ? "target=\"_blank\"" : "")>
                                                                <i class="@endpoint.Icon me-1"></i> Execute
                                                                @if (endpoint.IsExternal)
                                                                {
                                                                    <i class="bi bi-box-arrow-up-right ms-1"></i>
                                                                }
                                                            </a>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-@endpoint.ButtonColor btn-sm flex-fill" 
                                                                    onclick="handleEndpointExecution('@endpoint.Id', '@endpoint.Url', '@endpoint.Method', @endpoint.IsExternal.ToString().ToLower())">
                                                                <i class="@endpoint.Icon me-1"></i> Execute
                                                            </button>
                                                        }
                                                        <button type="button" class="btn btn-outline-secondary btn-sm" 
                                                                onclick="showEndpointDetails('@endpoint.Id')"
                                                                data-bs-toggle="tooltip" title="View Details">
                                                            <i class="bi bi-info-circle"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Quick Actions Floating Panel -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
        <div class="card shadow border-0" style="width: 300px;" id="quickActionsPanel">
            <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                <h6 class="mb-0"><i class="bi bi-lightning"></i> Quick Actions</h6>
                <button class="btn btn-sm btn-outline-light" onclick="toggleQuickActions()">
                    <i class="bi bi-dash"></i>
                </button>
            </div>
            <div class="card-body" id="quickActionsBody">
                <div class="d-grid gap-2">
                    <button class="btn btn-success btn-sm" onclick="executeQuickAction('health-check')">
                        <i class="bi bi-heart-pulse"></i> Health Check
                    </button>
                    <button class="btn btn-info btn-sm" onclick="executeQuickAction('refresh-cache')">
                        <i class="bi bi-arrow-clockwise"></i> Refresh Cache
                    </button>
                    <button class="btn btn-warning btn-sm" onclick="executeQuickAction('clear-logs')">
                        <i class="bi bi-trash"></i> Clear Logs
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Single Certificate Generation Modal -->
<div class="modal fade" id="singleCertificateModal" tabindex="-1" aria-labelledby="singleCertificateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="singleCertificateModalLabel">
                    <i class="bi bi-award text-success"></i> Generate Single Certificate
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="singleCertificateForm">
                    <div class="mb-3">
                        <label for="certificateEmail" class="form-label">Email Address <span class="text-danger">*</span></label>
                        <input type="email" class="form-control" id="certificateEmail" required 
                               placeholder="recipient@example.com">
                        <div class="invalid-feedback">Please provide a valid email address.</div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="certificateFirstName" class="form-label">First Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="certificateFirstName" required 
                                       placeholder="John" maxlength="50">
                                <div class="invalid-feedback">First name is required.</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="certificateLastName" class="form-label">Last Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="certificateLastName" required 
                                       placeholder="Doe" maxlength="50">
                                <div class="invalid-feedback">Last name is required.</div>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="certificateCompletionDate" class="form-label">Completion Date <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="certificateCompletionDate" required>
                        <div class="invalid-feedback">Completion date is required.</div>
                        <div class="form-text">Date cannot be in the future.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitSingleCertificate()">
                    <i class="bi bi-send"></i> Generate & Email Certificate
                </button>
            </div>
        </div>
    </div>
</div>

<!-- CSV Upload Modal -->
<div class="modal fade" id="csvUploadModal" tabindex="-1" aria-labelledby="csvUploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="csvUploadModalLabel">
                    <i class="bi bi-file-earmark-spreadsheet text-info"></i> Bulk Certificate Processing
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <h6><i class="bi bi-info-circle"></i> CSV Format Requirements</h6>
                    <p class="mb-2">Your CSV file must contain the following columns (case-sensitive):</p>
                    <ul class="mb-2">
                        <li><strong>Email</strong> - Valid email address</li>
                        <li><strong>FirstName</strong> - Participant's first name</li>
                        <li><strong>LastName</strong> - Participant's last name</li>
                        <li><strong>CompletionDate</strong> - Date in YYYY-MM-DD format</li>
                    </ul>
                    <a href="#" onclick="downloadCsvTemplate()" class="btn btn-sm btn-outline-info">
                        <i class="bi bi-download"></i> Download Template
                    </a>
                </div>
                
                <form id="csvUploadForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="csvFile" class="form-label">Select CSV File <span class="text-danger">*</span></label>
                        <input type="file" class="form-control" id="csvFile" accept=".csv" required onchange="validateCsvFile(this)">
                        <div class="invalid-feedback">Please select a valid CSV file.</div>
                        <div class="form-text">Maximum file size: 10MB</div>
                    </div>
                    
                    <div id="csvPreview" class="d-none">
                        <h6>File Preview (first 5 rows):</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered" id="csvPreviewTable">
                                <thead class="table-light"></thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </form>
                
                <!-- Upload Progress -->
                <div id="uploadProgress" class="d-none">
                    <div class="d-flex align-items-center mb-2">
                        <strong>Processing...</strong>
                        <div class="spinner-border spinner-border-sm ms-2" role="status">
                            <span class="visually-hidden">Processing...</span>
                        </div>
                    </div>
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                    </div>
                    <small class="text-muted">This may take several minutes for large files...</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-info" onclick="submitCsvUpload()" id="uploadButton">
                    <i class="bi bi-upload"></i> Process Certificates
                </button>
            </div>
        </div>
    </div>
</div>

<!-- API Response Modal -->
<div class="modal fade" id="apiResponseModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">API Response</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="apiResponseContent">
                    <div class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-2">Executing API call...</div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        let quickActionsPanelCollapsed = false;

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Auto-refresh system status every 30 seconds
            setInterval(refreshSystemStatus, 30000);
            
            // Set max date for completion date to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('certificateCompletionDate').setAttribute('max', today);
        });

        // Enhanced endpoint execution handler
        function handleEndpointExecution(endpointId, url, method, isExternal) {
            // Handle certificate-specific endpoints
            if (endpointId === 'generate-single-certificate') {
                showSingleCertificateModal();
                return;
            }
            
            if (endpointId === 'upload-csv-certificates') {
                showCsvUploadModal();
                return;
            }
            
            // Handle validation endpoint directly
            if (endpointId === 'validate-certificate-config') {
                executeApiCall(endpointId, url, method, isExternal);
                return;
            }
            
            // Default handling for other endpoints
            executeApiCall(endpointId, url, method, isExternal);
        }

        // Show single certificate modal
        function showSingleCertificateModal() {
            const modal = new bootstrap.Modal(document.getElementById('singleCertificateModal'));
            
            // Reset form
            document.getElementById('singleCertificateForm').reset();
            document.getElementById('singleCertificateForm').classList.remove('was-validated');
            
            modal.show();
        }

        // Show CSV upload modal
        function showCsvUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('csvUploadModal'));
            
            // Reset form and hide preview
            document.getElementById('csvUploadForm').reset();
            document.getElementById('csvUploadForm').classList.remove('was-validated');
            document.getElementById('csvPreview').classList.add('d-none');
            document.getElementById('uploadProgress').classList.add('d-none');
            
            modal.show();
        }

        // Submit single certificate generation
        function submitSingleCertificate() {
            const form = document.getElementById('singleCertificateForm');
            
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            // Validate completion date is not in future
            const completionDate = new Date(document.getElementById('certificateCompletionDate').value);
            const today = new Date();
            today.setHours(23, 59, 59, 999); // End of today
            
            if (completionDate > today) {
                document.getElementById('certificateCompletionDate').setCustomValidity('Completion date cannot be in the future');
                form.classList.add('was-validated');
                return;
            } else {
                document.getElementById('certificateCompletionDate').setCustomValidity('');
            }

            const certificateData = {
                email: document.getElementById('certificateEmail').value.trim(),
                firstName: document.getElementById('certificateFirstName').value.trim(),
                lastName: document.getElementById('certificateLastName').value.trim(),
                completionDate: document.getElementById('certificateCompletionDate').value
            };

            // Close the certificate modal
            bootstrap.Modal.getInstance(document.getElementById('singleCertificateModal')).hide();
            
            // Show API response modal
            const responseModal = new bootstrap.Modal(document.getElementById('apiResponseModal'));
            responseModal.show();
            
            // Reset response content
            document.getElementById('apiResponseContent').innerHTML = `
                <div class="text-center p-4">
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Generating certificate...</span>
                    </div>
                    <div class="mt-2">Generating and emailing certificate...</div>
                </div>`;

            // Make API call
            fetch('/api/foundationscertificate/generate-and-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(certificateData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                document.getElementById('apiResponseContent').innerHTML = `
                    <div class="alert alert-success">
                        <i class="bi bi-check-circle"></i> <strong>Success!</strong><br>
                        Certificate generated and emailed successfully.
                    </div>
                    <h6>Response Details:</h6>
                    <pre class="bg-light p-3 rounded"><code>${JSON.stringify(data, null, 2)}</code></pre>`;
            })
            .catch(error => {
                document.getElementById('apiResponseContent').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i> <strong>Error</strong><br>
                        ${error.message}
                    </div>`;
            });
        }

        // Validate CSV file selection
        function validateCsvFile(input) {
            const file = input.files[0];
            
            if (!file) return;
            
            // Check file type
            if (!file.name.toLowerCase().endsWith('.csv')) {
                input.setCustomValidity('Please select a CSV file');
                input.classList.add('is-invalid');
                return;
            }
            
            // Check file size (10MB limit)
            if (file.size > 10 * 1024 * 1024) {
                input.setCustomValidity('File size must be less than 10MB');
                input.classList.add('is-invalid');
                return;
            }
            
            input.setCustomValidity('');
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
            
            // Preview CSV
            previewCsvFile(file);
        }

        // Preview CSV file content
        function previewCsvFile(file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const csv = e.target.result;
                const lines = csv.split('\n').slice(0, 6); // Header + 5 rows
                
                if (lines.length > 1) {
                    const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                    const previewTable = document.getElementById('csvPreviewTable');
                    
                    // Create header
                    const thead = previewTable.querySelector('thead');
                    thead.innerHTML = '<tr>' + headers.map(h => `<th>${h}</th>`).join('') + '</tr>';
                    
                    // Create preview rows
                    const tbody = previewTable.querySelector('tbody');
                    const rows = lines.slice(1, 6).filter(line => line.trim()).map(line => {
                        const cells = line.split(',').map(c => c.trim().replace(/"/g, ''));
                        return '<tr>' + cells.map(c => `<td>${c}</td>`).join('') + '</tr>';
                    }).join('');
                    
                    tbody.innerHTML = rows;
                    document.getElementById('csvPreview').classList.remove('d-none');
                }
            };
            reader.readAsText(file);
        }

        // Submit CSV upload
        function submitCsvUpload() {
            const form = document.getElementById('csvUploadForm');
            const fileInput = document.getElementById('csvFile');
            
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }
            
            const file = fileInput.files[0];
            if (!file) {
                fileInput.setCustomValidity('Please select a file');
                form.classList.add('was-validated');
                return;
            }

            // Show progress
            document.getElementById('uploadProgress').classList.remove('d-none');
            document.getElementById('uploadButton').disabled = true;
            
            // Create FormData
            const formData = new FormData();
            formData.append('csvFile', file);

            // Make API call
            fetch('/api/foundationscertificate/upload', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                // Close upload modal
                bootstrap.Modal.getInstance(document.getElementById('csvUploadModal')).hide();
                
                // Show results in API response modal
                const responseModal = new bootstrap.Modal(document.getElementById('apiResponseModal'));
                document.getElementById('apiResponseContent').innerHTML = `
                    <div class="alert alert-success">
                        <i class="bi bi-check-circle"></i> <strong>Processing Complete!</strong>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="text-center">
                                <h4 class="text-primary">${data.totalRecords}</h4>
                                <small>Total Records</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                <h4 class="text-success">${data.successfullyProcessed}</h4>
                                <small>Successful</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                <h4 class="text-danger">${data.failed}</h4>
                                <small>Failed</small>
                            </div>
                        </div>
                    </div>
                    ${data.errors && data.errors.length > 0 ? `
                        <hr>
                        <h6>Errors:</h6>
                        <div class="alert alert-warning">
                            ${data.errors.slice(0, 5).map(error => 
                                `<div><strong>Row ${error.rowNumber}:</strong> ${error.errorMessage}</div>`
                            ).join('')}
                            ${data.errors.length > 5 ? `<div><em>... and ${data.errors.length - 5} more errors</em></div>` : ''}
                        </div>
                    ` : ''}
                    <h6>Full Response:</h6>
                    <pre class="bg-light p-3 rounded" style="max-height: 300px; overflow-y: auto;"><code>${JSON.stringify(data, null, 2)}</code></pre>`;
                responseModal.show();
            })
            .catch(error => {
                document.getElementById('apiResponseContent').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i> <strong>Upload Failed</strong><br>
                        ${error.message}
                    </div>`;
                
                // Show error in API response modal
                const responseModal = new bootstrap.Modal(document.getElementById('apiResponseModal'));
                responseModal.show();
            })
            .finally(() => {
                // Reset upload state
                document.getElementById('uploadProgress').classList.add('d-none');
                document.getElementById('uploadButton').disabled = false;
                bootstrap.Modal.getInstance(document.getElementById('csvUploadModal')).hide();
            });
        }

        // Download CSV template
        function downloadCsvTemplate() {
            const csvContent = "Email,FirstName,LastName,CompletionDate\n" +
                              "john.doe@example.com,John,Doe,2024-01-15\n" +
                              "jane.smith@example.com,Jane,Smith,2024-01-20";
            
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'certificate_template.csv';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }

        // Original functions (keeping existing functionality)
        function refreshDashboard() {
            const refreshBtn = document.querySelector('[onclick="refreshDashboard()"] i');
            refreshBtn.classList.add('fa-spin');
            
            setTimeout(() => {
                refreshBtn.classList.remove('fa-spin');
                location.reload();
            }, 1000);
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        }

        function executeApiCall(endpointId, url, method, isExternal) {
            const modal = new bootstrap.Modal(document.getElementById('apiResponseModal'));
            modal.show();

            if (isExternal) {
                document.getElementById('apiResponseContent').innerHTML = `
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        <strong>External API Call</strong><br>
                        Opening: <code>${url}</code><br>
                        Method: <code>${method}</code>
                    </div>`;
                window.open(url, '_blank');
                return;
            }

            const options = {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            };

            fetch(url, options)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    document.getElementById('apiResponseContent').innerHTML = `
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle"></i> <strong>Success</strong>
                        </div>
                        <h6>Response:</h6>
                        <pre class="bg-light p-3 rounded"><code>${JSON.stringify(data, null, 2)}</code></pre>`;
                })
                .catch(error => {
                    document.getElementById('apiResponseContent').innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle"></i> <strong>Error</strong><br>
                            ${error.message}
                        </div>`;
                });
        }

        function showEndpointDetails(endpointId) {
            // This would show detailed information about the endpoint
            alert(`Details for endpoint: ${endpointId}`);
        }

        function toggleQuickActions() {
            const panel = document.getElementById('quickActionsPanel');
            const body = document.getElementById('quickActionsBody');
            
            if (quickActionsPanelCollapsed) {
                body.style.display = 'block';
                quickActionsPanelCollapsed = false;
            } else {
                body.style.display = 'none';
                quickActionsPanelCollapsed = true;
            }
        }

        function executeQuickAction(action) {
            console.log(`Executing quick action: ${action}`);
            
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-success border-0 position-fixed bottom-0 start-0 m-3';
            toast.setAttribute('role', 'alert');
            toast.style.zIndex = '1060';
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi bi-check-circle me-2"></i>Quick action '${action}' executed successfully!
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>`;
            
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                document.body.removeChild(toast);
            });
        }

        function refreshSystemStatus() {
            console.log('Refreshing system status...');
        }

        // Add hover effects to endpoint cards
        document.querySelectorAll('.endpoint-card').forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px)';
                this.style.transition = 'transform 0.2s ease-in-out';
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
            });
        });

    </script>

    <style>
        .bg-gradient {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }
        
        .endpoint-card {
            transition: all 0.2s ease-in-out;
        }
        
        .endpoint-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
        }
        
        .card {
            border-radius: 10px;
        }
        
        .btn {
            border-radius: 6px;
        }
        
        @@media (max-width: 768px) {
            #quickActionsPanel {
                width: 250px !important;
            }
        }
    </style>
}